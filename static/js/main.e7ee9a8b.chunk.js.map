{"version":3,"sources":["components/GenresListContext.js","components/AntHeader.js","services/ApiServise.js","images/no-pictures.png","utils/date.utils..js","components/AntCard.js","components/AntSpin.js","components/AntSearchContent.js","components/AntRatedContent.js","components/App/App.js","index.js"],"names":["React","createContext","GenresListProvider","Provider","GenresListConsumer","Consumer","Header","Layout","AntHeader","onInputChange","placeholder","onChange","ApiServise","apiKey","process","baseStr","token","JSON","parse","localStorage","getItem","requestGet","url","fetch","then","res","ok","Error","status","json","a","URL","this","searchParams","set","body","sessionId","guest_session_id","searchQuery","numberPage","totalPages","total_pages","list","results","genres","id","rate","value","headers","method","stringify","catch","e","console","log","apiServise","formatDateRelease","dataStr","format","Date","AntCard","movieGenreList","genresIdsArr","map","el","props","genresList","find","item","name","shortenText","text","maxCharacters","length","substring","closestSpaceIndex","lastIndexOf","ratingСhanges","grade","deleteRateFilm","rateFilm","changeRateList","defineRatingСolor","num","color","borderColor","showPoster","image","iconNoPoster","checkMovieInRated","arr","isRating","rating","forEach","rateList","title","poster_path","overview","release_date","genre_ids","vote_average","onRating","poster","shorOverview","shorTitle","releaseDate","ratingСolor","genreArr","filmGenres","Fragment","genre","className","hoverable","cover","alt","src","style","defaultValue","count","Component","AntSpin","size","AntSearchContent","state","moviesList","loading","error","notFound","getList","getMovies","setState","onError","debouncedGetList","debounce","perevProps","onPageChange","errorMessage","message","description","type","showIcon","onNotFound","spinner","content","quickJumper","total","onPagination","showQuickJumper","defaultCurrent","showSizeChanger","AntRatedContent","TabPane","Tabs","App","target","page","getRatedFilms","onTabClick","key","getGenres","creatGuestSession","guestToken","setItem","defaultActiveKey","tab","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7ee9a8b.chunk.js","sourcesContent":["import React from 'react';\n\nconst { Provider: GenresListProvider, Consumer: GenresListConsumer } = React.createContext();\n\nexport { GenresListProvider, GenresListConsumer };\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Layout, Input } from 'antd';\n\nconst { Header } = Layout;\n\nconst AntHeader = ({ onInputChange }) => (\n  <Header>\n    <Input placeholder=\"Type to search...\" onChange={onInputChange} />\n  </Header>\n);\nexport default AntHeader;\n","class ApiServise {\n  apiKey = process.env.REACT_APP_API_KEY;\n  baseStr = 'https://api.themoviedb.org/3/';\n  token = JSON.parse(localStorage.getItem('guestToken'));\n\n  // шаблон GET запроса\n  requestGet = (url) => {\n    return fetch(url).then((res) => {\n      if (!res.ok) {\n        throw new Error(`error fetch URL ${url}, response status ${res.status}`);\n      }\n      return res.json();\n    });\n  };\n\n  // гостевая сессия\n  async creatGuestSession() {\n    const url = new URL(`${this.baseStr}authentication/guest_session/new`);\n    url.searchParams.set('api_key', this.apiKey);\n\n    const body = await this.requestGet(url);\n\n    const sessionId = body.guest_session_id;\n    return sessionId;\n  }\n\n  // получить список фильмов по поиску\n  async getMovies(searchQuery, numberPage) {\n    const url = new URL(`${this.baseStr}search/movie`);\n\n    url.searchParams.set('api_key', this.apiKey);\n    url.searchParams.set('query', searchQuery);\n    url.searchParams.set('page', numberPage);\n\n    const body = await this.requestGet(url);\n\n    return {\n      totalPages: body.total_pages,\n      list: body.results,\n    };\n  }\n\n  // получить список жанров\n  async getGenres() {\n    const url = new URL(`${this.baseStr}genre/movie/list`);\n    url.searchParams.set('api_key', this.apiKey);\n\n    const body = await this.requestGet(url);\n    return body.genres;\n  }\n\n  // оценивает фильм\n  async rateFilm(id, rate) {\n    const url = new URL(`${this.baseStr}movie/${id}/rating`);\n\n    url.searchParams.set('api_key', this.apiKey);\n    url.searchParams.set('guest_session_id', this.token);\n\n    const body = {\n      value: rate,\n    };\n    const headers = {\n      'Content-Type': 'application/json;charset=utf-8',\n    };\n    return await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: headers,\n    }).catch((e) => {\n      console.log(e);\n    });\n  }\n\n  // удаляет оценку\n  async deleteRateFilm(id) {\n    const url = new URL(`${this.baseStr}movie/${id}/rating`);\n\n    url.searchParams.set('api_key', this.apiKey);\n    url.searchParams.set('guest_session_id', this.token);\n\n    const headers = {\n      'Content-Type': 'application/json;charset=utf-8',\n    };\n    return await fetch(url, {\n      method: 'DELETE',\n      headers: headers,\n    });\n  }\n\n  // получает список оцененных фильмов\n  async getRatedFilms() {\n    const url = new URL(`${this.baseStr}guest_session/${this.token}/rated/movies`);\n    url.searchParams.set('api_key', this.apiKey);\n\n    const body = await this.requestGet(url);\n\n    return body;\n  }\n}\nconst apiServise = new ApiServise();\n\nexport default apiServise;\n","export default __webpack_public_path__ + \"static/media/no-pictures.5533b14a.png\";","import { format } from 'date-fns';\n\n// форматирует сроку даты выхода фильма\nconst formatDateRelease = (dataStr) => {\n  return format(new Date(dataStr), 'MMM Q, y');\n};\n\nexport default formatDateRelease;\n","import React, { Component } from 'react';\n\nimport apiServise from '../services/ApiServise';\nimport iconNoPoster from '.././images/no-pictures.png';\n\nimport formatDateRelease from '../utils/date.utils..js';\n\nimport { Card } from 'antd';\nimport { Rate } from 'antd';\n\nexport default class AntCard extends Component {\n  // вовзращает список жанров каждого конкретного фильма\n  movieGenreList = (genresIdsArr) => {\n    const newfilmGenres = genresIdsArr.map((el) => {\n      let foundGenre = this.props.genresList.find((item) => item.id === el);\n      return foundGenre.name;\n    });\n    return newfilmGenres;\n  };\n\n  // сокращает текст описания\n  shortenText = (text, maxCharacters) => {\n    const strLength = text.length;\n    let newText = '';\n\n    if (strLength > maxCharacters) {\n      const lastCharacter = text.substring(maxCharacters - 1, maxCharacters);\n      if (lastCharacter === ' ') {\n        newText = text.substring(0, maxCharacters) + '...';\n        return newText;\n      } else {\n        let closestSpaceIndex = text.substring(0, maxCharacters).lastIndexOf(' ');\n        newText = text.substring(0, closestSpaceIndex) + '...';\n        return newText;\n      }\n    } else {\n      return text;\n    }\n  };\n\n  // получает значение оценки и отправляет его на сервер\n  ratingСhanges = (grade) => {\n    const id = this.props.item.id;\n    if (grade === 0) {\n      // если оценка 0, то отправляет запрос на удаление оценки\n      apiServise.deleteRateFilm(id);\n    } else {\n      // отправляет запрос на добавление оценки\n      apiServise.rateFilm(id, grade);\n    }\n    // изменяет масссив оцененных\n    this.props.changeRateList();\n  };\n\n  // возвращает цвет блока с рейтингом\n  defineRatingСolor = (num) => {\n    let color;\n    if (num <= 3) {\n      // От 0 до 3 - #E90000\n      color = '#E90000';\n    } else if (num <= 5) {\n      // От 3 до 5 - #E97E00\n      color = '#E97E00';\n    } else if (num <= 7) {\n      // От 5 до 7 - #E9D100\n      color = '#E9D100';\n    } else if (num > 7) {\n      // Выше 7 - #66E900\n      color = '#66E900';\n    }\n\n    return {\n      borderColor: color,\n    };\n  };\n\n  // вовращает отформатированный постер или заглушку\n  showPoster = (image) => {\n    if (image !== null) {\n      return `https://image.tmdb.org/t/p/w200/${image}`;\n    } else {\n      return iconNoPoster;\n    }\n  };\n\n  // проверяет есть ли фильм в оцененных\n  checkMovieInRated = (id, arr, isRating) => {\n    let rating = 0;\n    // если rating есть\n    if (isRating) {\n      rating = isRating; // то возвращает его (это для компонент AntRatedContent)\n    } else {\n      arr.forEach((el) => {\n        // ищет по id элемент в массиве оцененных фильмов\n        if (el.id === id) {\n          return (rating = el.rating); // если есть, то берет rating от туда\n        }\n      });\n    }\n    return rating;\n  };\n\n  render() {\n    const { rateList } = this.props;\n\n    const { title, poster_path, overview, release_date, genre_ids, vote_average, rating, id } = this.props.item;\n\n    // оценка если фильм есть в оцененных\n    let onRating = this.checkMovieInRated(id, rateList, rating);\n\n    // отформатированный постер\n    const poster = this.showPoster(poster_path);\n\n    // сокращенный текст\n    const shorOverview = this.shortenText(overview, 180);\n\n    // сокращенный заголовок\n    const shorTitle = this.shortenText(title, 30);\n\n    // форматирование даты\n    const releaseDate = release_date ? formatDateRelease(release_date) : null;\n\n    // цвет блока с рейтингом\n    const ratingСolor = this.defineRatingСolor(vote_average);\n\n    // список жанров каждого конкретного фильма\n    const genreArr = this.movieGenreList(genre_ids);\n\n    // добавляет жанр в список жанров карточки\n    const filmGenres = (\n      <React.Fragment>\n        {genreArr.map((genre) => {\n          return (\n            <span className=\"ant-card-body_genre-item\" key={genre}>\n              {genre}\n            </span>\n          );\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Card className=\"ant-card\" hoverable cover={<img alt=\"poster\" src={poster} />}>\n        <div style={ratingСolor} className=\"ant-card-body_rating\">\n          {vote_average}\n        </div>\n        <div className=\"ant-card-body_title\">{shorTitle}</div>\n        <div className=\"ant-card-body_data\">{releaseDate}</div>\n        <div className=\"ant-card-body_genres\">{filmGenres}</div>\n        <p className=\"ant-card-body_text\"> {shorOverview}</p>\n\n        <div className=\"ant-card-body_genre-stars\">\n          <Rate defaultValue={onRating} count={10} onChange={this.ratingСhanges} />\n        </div>\n      </Card>\n    );\n  }\n}\n","import { Spin, Space } from 'antd';\n\nconst AntSpin = () => (\n  <Space size=\"large\">\n    <Spin size=\"large\" className=\"loader\" />\n  </Space>\n);\nexport default AntSpin;\n","import React, { Component } from 'react';\n// components\nimport apiServise from '../services/ApiServise';\nimport AntCard from './AntCard';\nimport AntSpin from './AntSpin';\n\n// react context\nimport { GenresListConsumer } from './GenresListContext';\n\nimport { Alert } from 'antd';\nimport { Pagination } from 'antd';\nimport { Content } from 'antd/lib/layout/layout';\n\nimport { debounce } from 'lodash';\n\nexport default class AntSearchContent extends Component {\n  state = {\n    moviesList: [],\n    loading: false,\n    error: false,\n    notFound: false,\n    totalPages: null,\n  };\n\n  // получить список фильмов\n  getList = (searchQuery, numberPage) => {\n    apiServise\n      // делаем запрос на сервер передаем значение из строки поиска\n      .getMovies(searchQuery, numberPage)\n      .then((res) => {\n        this.setState({\n          moviesList: [...res.list],\n          loading: false,\n          error: false,\n          totalPages: res.totalPages,\n        });\n      })\n      .then(() => {\n        // если поиск не дал результатов (пустой массив)\n        if (this.state.moviesList.length === 0) {\n          this.setState({\n            notFound: true,\n          });\n        }\n      })\n      .catch(this.onError);\n  };\n\n  // задержка запроса\n  debouncedGetList = debounce(this.getList, 500);\n\n  // обрабатывает ошибку данных с сервера\n  onError = () => {\n    this.setState({\n      error: true,\n      loading: false,\n    });\n  };\n\n  componentDidUpdate(perevProps) {\n    const { searchQuery, numberPage } = this.props;\n\n    if (searchQuery !== perevProps.searchQuery || numberPage !== perevProps.numberPage) {\n      this.setState({\n        loading: true,\n        error: false,\n        notFound: false,\n      });\n      this.debouncedGetList(searchQuery, numberPage);\n    }\n  }\n\n  render() {\n    const { moviesList, loading, error, notFound, totalPages } = this.state;\n\n    const { searchQuery, numberPage, onPageChange, changeRateList, rateList } = this.props;\n\n    // сообщение об ошибке\n    const errorMessage =\n      error && searchQuery !== '' ? (\n        <Alert message=\"Error\" description=\"Oops, something went wrong :-(\" type=\"error\" showIcon />\n      ) : null;\n\n    // сообщение об отсутствии результатов поиска\n    const onNotFound =\n      !error && !loading && notFound ? (\n        <Alert message=\"No results were found for your search!\" type=\"info\" showIcon />\n      ) : null;\n\n    // индикатор загрузки\n    const spinner = loading ? <AntSpin /> : null;\n\n    // обображенеи списка фильмов\n    const content = !(loading || error) ? (\n      <GenresListConsumer>\n        {(genresList) => {\n          return (\n            <React.Fragment>\n              {moviesList.map((item) => {\n                const { id } = item;\n                return (\n                  <AntCard\n                    item={item}\n                    key={id}\n                    genresList={genresList}\n                    changeRateList={changeRateList}\n                    rateList={rateList}\n                  />\n                );\n              })}\n            </React.Fragment>\n          );\n        }}\n      </GenresListConsumer>\n    ) : null;\n\n    // пагинация\n    const quickJumper = totalPages > 5 ? true : false; // показывать ли окно ввода страницы\n    const total = totalPages * 10; // сколько всего страниц\n\n    const onPagination =\n      moviesList.length !== 0 && searchQuery !== '' && !loading ? (\n        <Pagination\n          size=\"small\"\n          showQuickJumper={quickJumper}\n          defaultCurrent={numberPage}\n          total={total}\n          onChange={onPageChange}\n          showSizeChanger={false}\n        ></Pagination>\n      ) : null;\n\n    return (\n      <React.Fragment>\n        <Content>\n          {spinner}\n          {content}\n          {errorMessage}\n          {onNotFound}\n        </Content>\n        {onPagination}\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport { Content } from 'antd/lib/layout/layout';\n\nimport { GenresListConsumer } from './GenresListContext';\nimport AntCard from './AntCard';\n\nconst AntRatedContent = ({ rateList, changeRateList }) => (\n  <Content>\n    <GenresListConsumer>\n      {(genresList) => {\n        return rateList.map((item) => {\n          const { id } = item;\n          return <AntCard item={item} key={id} genresList={genresList} changeRateList={changeRateList} />;\n        });\n      }}\n    </GenresListConsumer>\n  </Content>\n);\n\nexport default AntRatedContent;\n","import 'antd/dist/antd.css';\nimport './App.css';\nimport React, { Component } from 'react';\n\n// react context\nimport { GenresListProvider } from '../GenresListContext';\n\nimport AntHeader from '../AntHeader';\nimport AntSearchContent from '../AntSearchContent';\nimport AntRatedContent from '../AntRatedContent';\n\nimport apiServise from '../../services/ApiServise';\n\nimport { Layout } from 'antd';\nimport { Tabs } from 'antd';\n\nconst { TabPane } = Tabs;\n\nexport default class App extends Component {\n  state = {\n    searchQuery: null,\n    numberPage: 1,\n    genresList: [],\n    rateList: [],\n  };\n\n  componentDidMount() {\n    // получает список жанров\n    apiServise.getGenres().then((list) => {\n      this.setState({\n        genresList: [...list],\n      });\n    });\n\n    // если в localStorage нет токена\n    if (!JSON.parse(localStorage.getItem('guestToken'))) {\n      // запускает гостевую сессию\n      apiServise.creatGuestSession().then((guestToken) => {\n        // сохраняет token в localStorage\n        localStorage.setItem('guestToken', JSON.stringify(guestToken));\n      });\n    } else {\n      // если есть, то получает список оцененных и записывает в rateList\n      this.changeRateList();\n    }\n  }\n\n  // следит за строкой ввода\n  onInputChange = (e) => {\n    this.setState({\n      searchQuery: e.target.value,\n      numberPage: 1,\n    });\n  };\n\n  // следит за компонентом пагинации\n  onPageChange = (page) => {\n    this.setState({\n      numberPage: page,\n    });\n  };\n\n  // изменяет массив с оцененными фильмами\n  changeRateList = () => {\n    // получает список оцененных\n    apiServise.getRatedFilms().then((res) => {\n      this.setState({\n        rateList: [...res.results], // записывает в rateList\n      });\n    });\n  };\n\n  // клик по табу\n  onTabClick = (key) => {\n    // получает список оцененных и записывает в rateList\n    this.changeRateList();\n  };\n\n  render() {\n    const { searchQuery, numberPage, genresList, rateList } = this.state;\n    return (\n      <GenresListProvider value={genresList}>\n        <div className=\"container\">\n          <Layout>\n            <Tabs defaultActiveKey=\"1\" onTabClick={this.onTabClick}>\n              <TabPane tab=\"Search\" key=\"1\">\n                <AntHeader onInputChange={this.onInputChange} />\n                <AntSearchContent\n                  searchQuery={searchQuery}\n                  numberPage={numberPage}\n                  onPageChange={this.onPageChange}\n                  changeRateList={this.changeRateList}\n                  rateList={rateList}\n                />\n              </TabPane>\n              <TabPane tab=\"Rated\" key=\"2\">\n                <AntRatedContent rateList={rateList} changeRateList={this.changeRateList} />\n              </TabPane>\n            </Tabs>\n          </Layout>\n        </div>\n      </GenresListProvider>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from '../src/components/App/App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}