{"version":3,"sources":["components/GenresListContext.js","components/AntHeader.js","components/ApiServise.js","components/no-pictures.png","components/AntCard.js","components/AntSpin.js","components/AntSearchContent.js","components/AntRatedContent.js","components/App/App.js","index.js"],"names":["React","createContext","GenresListProvider","Provider","GenresListConsumer","Consumer","Header","Layout","AntHeader","onInputChange","placeholder","onChange","ApiServise","apiKey","baseStr","requestGet","url","fetch","then","res","ok","Error","status","json","a","this","body","sessionId","guest_session_id","searchQuery","numberPage","totalPages","total_pages","list","results","genres","id","token","rate","value","headers","method","JSON","stringify","AntCard","state","genresList","props","movieGenreList","genresIdsArr","newfilmGenres","genreId","forEach","el","push","name","formatDateRelease","dataStr","format","Date","shortenText","text","maxCharacters","length","substring","closestSpaceIndex","lastIndexOf","ratingСhanges","grade","apiCall","item","deleteRateFilm","rateFilm","defineRatingСolor","num","color","borderColor","showPoster","image","iconNoPoster","title","poster_path","overview","release_date","genre_ids","vote_average","rating","poster","shorOverview","shorTitle","releaseDate","ratingСolor","onRating","genreArr","filmGenres","Fragment","map","genre","ind","className","hoverable","cover","alt","src","style","disabled","defaultValue","count","Component","AntSpin","size","AntSearchContent","moviesList","loading","error","notFound","getList","getMovies","setState","catch","onError","debounced","debounce","perevProps","onPageChange","errorMessage","message","description","type","showIcon","onNotFound","spinner","content","quickJumper","total","onPagination","showQuickJumper","defaultCurrent","showSizeChanger","AntRatedContent","rateList","TabPane","Tabs","App","e","target","page","onTabClick","key","getRatedFilms","creatGuestSession","guestToken","getGenres","defaultActiveKey","tab","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04c7ad99.chunk.js","sourcesContent":["import React from 'react';\n\nconst { Provider: GenresListProvider, Consumer: GenresListConsumer } = React.createContext();\n\nexport { GenresListProvider, GenresListConsumer };\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Layout, Input } from 'antd';\n\nconst { Header } = Layout;\n\nconst AntHeader = ({ onInputChange }) => (\n  <Header>\n    <Input placeholder=\"Type to search...\" onChange={onInputChange} />\n  </Header>\n);\nexport default AntHeader;\n","export default class ApiServise {\n  apiKey = '162123c84167fbeaf28191b62529a99d';\n  baseStr = 'https://api.themoviedb.org/3/';\n\n  // шаблон GET запроса\n  requestGet = (url) => {\n    return fetch(url).then((res) => {\n      if (!res.ok) {\n        throw new Error(`error fetch URL ${url}, response status ${res.status}`);\n      }\n      return res.json();\n    });\n  };\n\n  // гостевая сессия\n  async creatGuestSession() {\n    const url = `${this.baseStr}authentication/guest_session/new?api_key=${this.apiKey}`;\n\n    const body = await this.requestGet(url);\n    // console.log(body)\n    const sessionId = body.guest_session_id;\n    return sessionId;\n  }\n\n  // получить список фильмов по поиску\n  async getMovies(searchQuery, numberPage) {\n    const url = `${this.baseStr}search/movie?api_key=${this.apiKey}&query=${searchQuery}&page=${numberPage}`;\n\n    const body = await this.requestGet(url);\n\n    return {\n      totalPages: body.total_pages,\n      list: body.results,\n    };\n  }\n\n  // получить список жанров\n  async getGenres() {\n    const url = `${this.baseStr}genre/movie/list?api_key=${this.apiKey}`;\n    const body = await this.requestGet(url);\n    return body.genres;\n  }\n\n  // оценивает фильм\n  async rateFilm(id, token, rate) {\n    const url = `${this.baseStr}movie/${id}/rating?api_key=${this.apiKey}&guest_session_id=${token}`;\n\n    const body = {\n      value: rate,\n    };\n    const headers = {\n      'Content-Type': 'application/json;charset=utf-8',\n    };\n    return await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: headers,\n    });\n  }\n\n  // удаляет оценку\n  async deleteRateFilm(id, token) {\n    const url = `${this.baseStr}movie/${id}/rating?api_key=${this.apiKey}&guest_session_id=${token}`;\n\n    const headers = {\n      'Content-Type': 'application/json;charset=utf-8',\n    };\n    return await fetch(url, {\n      method: 'DELETE',\n      headers: headers,\n    });\n  }\n\n  // получает список оцененных фильмов\n  async getRatedFilms(token) {\n    const url = `${this.baseStr}guest_session/${token}/rated/movies?api_key=${this.apiKey}`;\n\n    const body = await this.requestGet(url);\n\n    return body;\n  }\n}\n","export default __webpack_public_path__ + \"static/media/no-pictures.5533b14a.png\";","import React, { Component } from 'react';\nimport { format } from 'date-fns';\n\nimport ApiServise from './ApiServise';\nimport iconNoPoster from './no-pictures.png';\n\nimport { Card } from 'antd';\nimport { Rate } from 'antd';\n\nexport default class AntCard extends Component {\n  state = {\n    genresList: this.props.genresList,\n  };\n\n  // вовзращает список жанров каждого конкретного фильма\n  movieGenreList = (genresIdsArr) => {\n    const newfilmGenres = [];\n    for (let genreId of genresIdsArr) {\n      this.state.genresList.forEach((el) => {\n        if (el.id === genreId) {\n          newfilmGenres.push(el.name);\n        }\n      });\n    }\n    // console.log(newfilmGenres)\n    return newfilmGenres;\n  };\n\n  // форматирует сроку даты выхода фильма\n  formatDateRelease = (dataStr) => {\n    return format(new Date(dataStr), 'MMM Q, y');\n  };\n\n  // сокращает текст описания\n  shortenText = (text, maxCharacters) => {\n    const strLength = text.length;\n    let newText = '';\n\n    if (strLength > maxCharacters) {\n      const lastCharacter = text.substring(maxCharacters - 1, maxCharacters);\n      if (lastCharacter === ' ') {\n        newText = text.substring(0, maxCharacters) + '...';\n        return newText;\n      } else {\n        let closestSpaceIndex = text.substring(0, maxCharacters).lastIndexOf(' ');\n        newText = text.substring(0, closestSpaceIndex) + '...';\n        return newText;\n      }\n    } else {\n      return text;\n    }\n  };\n\n  // получает значение оценки и отправляет его на сервер\n  ratingСhanges = (grade) => {\n    const apiCall = new ApiServise();\n    const id = this.props.item.id;\n    const token = this.props.token;\n\n    if (grade === 0) {\n      // если оценка 0, то отправляет запрос на удаление оенки\n      apiCall.deleteRateFilm(id, token);\n    } else {\n      // отправляет запрос на добавление оценки\n      apiCall.rateFilm(id, token, grade);\n    }\n  };\n\n  // возвращает цвет блока с рейтингом\n  defineRatingСolor = (num) => {\n    let color;\n    if (num <= 3) {\n      // От 0 до 3 - #E90000\n      color = '#E90000';\n    } else if (num <= 5) {\n      // От 3 до 5 - #E97E00\n      color = '#E97E00';\n    } else if (num <= 7) {\n      // От 5 до 7 - #E9D100\n      color = '#E9D100';\n    } else if (num > 7) {\n      // Выше 7 - #66E900\n      color = '#66E900';\n    }\n\n    return {\n      borderColor: color,\n    };\n  };\n\n  // вовращает отформатированный постер или заглушку\n  showPoster = (image) => {\n    if (image !== null) {\n      return `https://image.tmdb.org/t/p/w200/${image}`;\n    } else {\n      return iconNoPoster;\n    }\n  };\n\n  render() {\n    // console.log(this.state.showRating)\n    const { title, poster_path, overview, release_date, genre_ids, vote_average, rating } = this.props.item;\n\n    // отформатированный постер\n    const poster = this.showPoster(poster_path);\n\n    // сокращенный текст\n    const shorOverview = this.shortenText(overview, 180);\n\n    // сокращенный заголовок\n    const shorTitle = this.shortenText(title, 30);\n\n    // форматирование даты\n    const releaseDate = release_date ? this.formatDateRelease(release_date) : null;\n\n    // цвет блока с рейтингом\n    const ratingСolor = this.defineRatingСolor(vote_average);\n\n    // если был оценен, то передает оценку\n    let onRating = rating ? rating : 0;\n\n    // список жанров каждого конкретного фильма\n    const genreArr = this.movieGenreList(genre_ids);\n\n    // добавляет жанр в список жанров карточки\n    const filmGenres = (\n      <React.Fragment>\n        {genreArr.map((genre, ind) => {\n          return (\n            <span className=\"ant-card-body_genre-item\" key={ind}>\n              {genre}\n            </span>\n          );\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Card className=\"ant-card\" hoverable cover={<img alt=\"poster\" src={poster} />}>\n        <div style={ratingСolor} className=\"ant-card-body_rating\">\n          {vote_average}\n        </div>\n        <div className=\"ant-card-body_title\">{shorTitle}</div>\n        <div className=\"ant-card-body_data\">{releaseDate}</div>\n        <div className=\"ant-card-body_genres\">{filmGenres}</div>\n        <p className=\"ant-card-body_text\"> {shorOverview}</p>\n\n        <div className=\"ant-card-body_genre-stars\">\n          <Rate disabled={onRating ? true : false} defaultValue={onRating} count={10} onChange={this.ratingСhanges} />\n        </div>\n      </Card>\n    );\n  }\n}\n","import { Spin, Space } from 'antd';\n\nconst AntSpin = () => (\n  <Space size=\"large\">\n    <Spin size=\"large\" className=\"loader\" />\n  </Space>\n);\nexport default AntSpin;\n","import React, { Component } from 'react';\n// components\nimport ApiServise from './ApiServise';\nimport AntCard from './AntCard';\nimport AntSpin from './AntSpin';\n\n// react context\nimport { GenresListConsumer } from './GenresListContext';\n\nimport { Alert } from 'antd';\nimport { Pagination } from 'antd';\nimport { Content } from 'antd/lib/layout/layout';\n\nimport { debounce } from 'lodash';\n\nexport default class AntSearchContent extends Component {\n  state = {\n    moviesList: [],\n    loading: false,\n    error: false,\n    notFound: false,\n    totalPages: null,\n  };\n\n  // получить список фильмов\n  getList = (searchQuery, numberPage) => {\n    // инстанс ApiServise\n    const apiCall = new ApiServise();\n\n    apiCall\n      // делаем запрос а сервер передаем значение из строки поиска\n      .getMovies(searchQuery, numberPage)\n      .then((res) => {\n        this.setState({\n          moviesList: [...res.list],\n          loading: false,\n          error: false,\n          totalPages: res.totalPages,\n        });\n\n        // если поиск не дал результатов (пустой массив)\n        if (this.state.moviesList.length === 0) {\n          this.setState({\n            notFound: true,\n          });\n        }\n      })\n      .catch(this.onError);\n  };\n  // задержка запроса\n  debounced = debounce(this.getList, 500);\n\n  // обрабатывает ошибку данных с сервера\n  onError = () => {\n    this.setState({\n      error: true,\n      loading: false,\n    });\n  };\n\n  componentDidUpdate(perevProps) {\n    const { searchQuery, numberPage } = this.props;\n\n    if (searchQuery !== perevProps.searchQuery || numberPage !== perevProps.numberPage) {\n      this.setState({\n        loading: true,\n        error: false,\n        notFound: false,\n      });\n      this.debounced(searchQuery, numberPage);\n    }\n  }\n\n  render() {\n    const { moviesList, loading, error, notFound, totalPages } = this.state;\n    const { searchQuery, numberPage, onPageChange, token } = this.props;\n\n    // сообщение об ошибке\n    const errorMessage =\n      error && searchQuery !== '' ? (\n        <Alert message=\"Error\" description=\"Oops, something went wrong :-(\" type=\"error\" showIcon />\n      ) : null;\n\n    // сообщение об отсутствии результатов поиска\n    const onNotFound =\n      !error && !loading && notFound ? (\n        <Alert message=\"No results were found for your search!\" type=\"info\" showIcon />\n      ) : null;\n\n    // индикатор загрузки\n    const spinner = loading ? <AntSpin /> : null;\n\n    // обображенеи списка фильмов\n    const content = !(loading || error) ? (\n      <GenresListConsumer>\n        {(genresList) => {\n          return (\n            <React.Fragment>\n              {moviesList.map((item) => {\n                const { id } = item;\n                return <AntCard item={item} key={id} genresList={genresList} token={token} />;\n              })}\n            </React.Fragment>\n          );\n        }}\n      </GenresListConsumer>\n    ) : null;\n\n    // пагинация\n    const quickJumper = totalPages > 5 ? true : false; // показывать ли окно ввода страницы\n    const total = totalPages * 10; // сколько всего страниц\n\n    const onPagination =\n      moviesList.length !== 0 && searchQuery !== '' && !loading ? (\n        <Pagination\n          size=\"small\"\n          showQuickJumper={quickJumper}\n          defaultCurrent={numberPage}\n          total={total}\n          onChange={onPageChange}\n          showSizeChanger={false}\n        ></Pagination>\n      ) : null;\n\n    return (\n      <React.Fragment>\n        <Content>\n          {spinner}\n          {content}\n          {errorMessage}\n          {onNotFound}\n        </Content>\n        {onPagination}\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport { Content } from 'antd/lib/layout/layout';\n\nimport { GenresListConsumer } from './GenresListContext';\nimport AntCard from './AntCard';\n\nconst AntRatedContent = ({ rateList }) => (\n  <Content>\n    <GenresListConsumer>\n      {(genresList) => {\n        return rateList.map((item) => {\n          const { id } = item;\n          return <AntCard item={item} key={id} genresList={genresList} />;\n        });\n      }}\n    </GenresListConsumer>\n  </Content>\n);\nexport default AntRatedContent;\n","import 'antd/dist/antd.css';\nimport './App.css';\nimport React, { Component } from 'react';\n\n// react context\nimport { GenresListProvider } from '../GenresListContext';\n\nimport AntHeader from '../AntHeader';\nimport AntSearchContent from '../AntSearchContent';\nimport AntRatedContent from '../AntRatedContent';\nimport ApiServise from '../ApiServise';\n\nimport { Layout } from 'antd';\nimport { Tabs } from 'antd';\n\nconst { TabPane } = Tabs;\n\nexport default class App extends Component {\n  state = {\n    searchQuery: null,\n    numberPage: 1,\n    genresList: [],\n    rateList: [],\n    token: null,\n  };\n\n  componentDidMount() {\n    // инициализация класса вызова API\n    const apiCall = new ApiServise();\n\n    // запускает гостевую сессию\n    apiCall.creatGuestSession().then((guestToken) => {\n      this.setState({\n        token: guestToken,\n      });\n    });\n\n    // получает список жанров\n    apiCall.getGenres().then((list) => {\n      this.setState({\n        genresList: [...list],\n      });\n    });\n  }\n\n  // следит за строкой ввода\n  onInputChange = (e) => {\n    this.setState({\n      searchQuery: e.target.value,\n      numberPage: 1,\n    });\n  };\n\n  // следит за компонентом пагинации\n  onPageChange = (page) => {\n    this.setState({\n      numberPage: page,\n    });\n  };\n\n  // клик по табу\n  onTabClick = (key) => {\n    // получает список оцененных\n    if (key === '2') {\n      const apiCall = new ApiServise();\n      apiCall.getRatedFilms(this.state.token).then((res) => {\n        this.setState({\n          rateList: [...res.results],\n        });\n      });\n    }\n  };\n\n  render() {\n    const { searchQuery, numberPage, genresList, token, rateList } = this.state;\n    return (\n      <GenresListProvider value={genresList}>\n        <div className=\"container\">\n          <Layout>\n            <Tabs defaultActiveKey=\"1\" onTabClick={this.onTabClick}>\n              <TabPane tab=\"Search\" key=\"1\">\n                <AntHeader onInputChange={this.onInputChange} />\n                <AntSearchContent\n                  searchQuery={searchQuery}\n                  numberPage={numberPage}\n                  onPageChange={this.onPageChange}\n                  token={token}\n                />\n              </TabPane>\n              <TabPane tab=\"Rated\" key=\"2\">\n                <AntRatedContent token={token} rateList={rateList} />\n              </TabPane>\n            </Tabs>\n          </Layout>\n        </div>\n      </GenresListProvider>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from '../src/components/App/App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}